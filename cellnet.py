import sys
import time
import math
import os
import win32com.client
import xlwt
from xlwt import Workbook
import openpyxl
import datetime
import xlsxwriter
import PyQt5
from PyQt5 import QtGui
from cellnet import *
from main import *
from detect import *
from prediction import *
import csv, os, glob
import pandas as pd
import cellnet
import med2image
from pylab import *
from models.bert import run_classifier
from skimage import data, io, color
import cv2
'''
the resources file must be generated by this command 
pyrcc5 -o cellnetres_rc.py cellnetres.qrc
'''
from  cellnetres_rc import *
from PyQt5 import QtCore,QtGui, uic,QtWidgets
from PyQt5.QtGui import QIcon, QPixmap

qtCreatorFile = r'cellnet.ui'
predictionlabel, targetlabel,pathlist = [], [], []
predictionlabel2, targetlabel2,pathlist2 = [], [], []
predictionlabel3, targetlabel3,pathlist3 = [], [], []
predictionlabel4, targetlabel4 = [], []
Ui_MainWindow, QtBaseClass = uic.loadUiType(qtCreatorFile)
script_dir = os.path.dirname(__file__)

labels2classesofCOVID = {
'[0]': 'COVID',
'[1]': 'NORMAL'
}
labels2classesofcovidnlp = {
'0': 'Flu',
'1': 'Covid-19'
}
labels2classesofmelanoma  = {
'[0]': 'Benign',
'[1]': 'Malignant'
}


def _globrec(path, *exts):
    """ Glob recursively a directory and all subdirectories for multiple file extensions
    Note: Glob is case-insensitive, i. e. for '\*.jpg' you will get files ending
    with .jpg and .JPG
    Parameters
    ----------
    path : str
        A directory name
    exts : tuple
        File extensions to glob for
    Returns
    -------
    files : list
        list of files matching extensions in exts in path and subfolders
   """
    dirs = [a[0] for a in os.walk(path)]
    f_filter = [d+e for d in dirs for e in exts]
    return [f for files in [glob.iglob(files) for files in f_filter] for f in files]

class MyApp(QtWidgets.QMainWindow, Ui_MainWindow):


    def __init__(self):

        QtWidgets.QMainWindow.__init__(self)
        Ui_MainWindow.__init__(self)
        self.setupUi(self)

        #Nextbutton action
        self.nextbutton1.clicked.connect(lambda: self.nextbuttonClick(self.nextbutton1))
        self.nextbutton2.clicked.connect(lambda: self.nextbuttonClick(self.nextbutton2))
        self.nextbutton3.clicked.connect(lambda: self.nextbuttonClick(self.nextbutton3))
        self.nextbutton4.clicked.connect(lambda: self.nextbuttonClick(self.nextbutton4))
        self.nextbutton5.clicked.connect(lambda: self.nextbuttonClick(self.nextbutton5))
        self.nextbutton6.clicked.connect(lambda: self.nextbuttonClick(self.nextbutton6))

        # previousbutton action
        self.previousbutton3.clicked.connect(lambda: self.perviousbuttonClick(self.previousbutton3))
        self.previousbutton4.clicked.connect(lambda: self.perviousbuttonClick(self.previousbutton4))
        self.previousbutton5.clicked.connect(lambda: self.perviousbuttonClick(self.previousbutton5))
        self.previousbutton6.clicked.connect(lambda: self.perviousbuttonClick(self.previousbutton6))
        self.previousbutton7.clicked.connect(lambda: self.perviousbuttonClick(self.previousbutton7))


        # defaultbutton action
        self.defaultbutton.clicked.connect(lambda: self.defaultbuttonClick(self.defaultbutton))

        # cifar10dataset page activated
        self.cifar10dataset.clicked.connect(lambda: self.cifar10datasetClick(self.cifar10dataset))

        # pneumoniadataset page activated
        self.pneumoniadataset.clicked.connect(lambda: self.pneumoniadatasetClick(self.pneumoniadataset))

        # sezarysyndromedataset page activated
        self.sezarysyndromedataset.clicked.connect(lambda: self.sezarysyndromedatasetClick(self.sezarysyndromedataset))

        # covid19dataset page activated
        self.covid19dataset.clicked.connect(lambda: self.covid19datasetClick(self.covid19dataset))

        # melanomadataset page activated
        self.melanomadataset.clicked.connect(lambda: self.melanomadatasetClick(self.melanomadataset))

        # covid19nlpdataset page activated
        self.covid19nlpdataset.clicked.connect(lambda: self.covid19nlpdatasetClick(self.covid19nlpdataset))



        # Compare with all state of the arts algorithm on cifar-10 datasets
        self.compareoncifar.clicked.connect(lambda: self.compareoncifarClick(self.compareoncifar))
        # Compare with all state of the arts algorithm on pneumonia datasets
        self.compareonpneumonia.clicked.connect(lambda: self.compareonpneumoniaClick(self.compareonpneumonia))
        # Compare with all state of the arts algorithm on covid datasets

        self.compareoncovid.clicked.connect(lambda: self.compareoncovidClick(self.compareoncovid))
        # Compare with all state of the arts algorithm on Sezary Syndrome  datasets
        self.compareonsshd.clicked.connect(lambda: self.compareonsshdClick(self.compareonsshd))


        # check the pic upload first
        self.inputbutton4.clicked.connect(lambda: self.inputbutton4Click(self.inputbutton4))
        # make a prediction on covid Syndrome
        self.prediction4.clicked.connect(lambda: self.prediction4Click(self.prediction4))


        # check the pic upload first
        self.inputbutton5_1.clicked.connect(lambda: self.inputbutton5_1Click(self.inputbutton5_1))
        self.inputbutton5_2.clicked.connect(lambda: self.inputbutton5_2Click(self.inputbutton5_2))
        # make a prediction on hdss Syndrome
        self.prediction5.clicked.connect(lambda: self.prediction5Click(self.prediction5))
        self.cellyolo.clicked.connect(lambda: self.cellyoloClick(self.cellyolo))

        # check the pic upload first
        self.inputbutton6.clicked.connect(lambda: self.inputbutton6Click(self.inputbutton6))
        # make a prediction on melanoma Syndrome
        self.prediction6.clicked.connect(lambda: self.prediction6Click(self.prediction6))

        # check the txt upload first
        self.inputbutton7.clicked.connect(lambda: self.inputbutton7Click(self.inputbutton7))
        # make a prediction on covid19nlpdataset
        self.prediction7.clicked.connect(lambda: self.prediction7Click(self.prediction7))

        #slider on cifar and pneumonia page
        self.slider3.valueChanged.connect(self.valuechangeofslider3)
        #slider on covid page
        self.slider4.valueChanged.connect(self.valuechangeofslider4)
        #slider on Sezary Syndrome page
        self.slider5.valueChanged.connect(self.valuechangeofslider5)
        # slider on melanoma Syndrome page
        self.slider6.valueChanged.connect(self.valuechangeofslider6)
        # slider on covid19nlp page
        self.slider7.valueChanged.connect(self.valuechangeofslider7)
        self.hins_3.hide()
        self.hins_2.hide()
        self.hins.hide()
        self.hins7.hide()


    # Nextbutton action
    def nextbuttonClick(self, nextbutton):
        pageindex=self.pages.currentIndex()
        self.pages.setCurrentIndex(pageindex+1)

    # previousbutton action
    def perviousbuttonClick(self, previousbutton):
        pageindex = self.pages.currentIndex()
        self.pages.setCurrentIndex(pageindex - 1)

    # defaultbutton action
    def defaultbuttonClick(self, defaultbutton):
        self.pages.setCurrentIndex(1)

    # cifar10dataset page activated
    def cifar10datasetClick(self, cifar10dataset):
        self.pages.setCurrentIndex(2)

    # pneumoniadataset page activated
    def pneumoniadatasetClick(self, pneumoniadataset):
        self.pages.setCurrentIndex(2)

    # sezarysyndromedataset page activated
    def sezarysyndromedatasetClick(self, sezarysyndromedataset):
        self.pages.setCurrentIndex(4)

    # covid19dataset page activated
    def covid19datasetClick(self, covid19dataset):
        self.pages.setCurrentIndex(3)

    # cmelanomadataset page activated
    def melanomadatasetClick(self, cmelanomadataset):
        self.pages.setCurrentIndex(5)

    # cmelanomadataset page activated
    def covid19nlpdatasetClick(self, covid19nlpdataset):
        self.pages.setCurrentIndex(6)


    def compareoncifarClick(self, compareoncifar):


        rel_path = "./paperimage/"
        paperimage = os.path.join(script_dir, rel_path)

        valimage = _globrec(str(paperimage), '\Boxplot of ghostnet on cifa, OurGhostResNet o, resnet18 on cifa.png')
        pixmap = QPixmap(valimage [0])
        self.val_1.setValue(0.924500)
        self.imgdata_9.hide()
        self.imgdata_8.show()
        pixmap_resized = pixmap.scaled(self.imgdata_8.width(), self.imgdata_8.height(), QtCore.Qt.KeepAspectRatio)
        self.hins_2.show()
        self.hins_2.setText("CellNet achieved Top-1 Val Acc 92.45% with 1/4 weights than ResNet18!")
        self.imgdata_8.setPixmap(pixmap_resized)

    def compareoncovidClick(self, compareoncovid):
        self.hins_3.hide()
        rel_path = "./paperimage/"
        paperimage = os.path.join(script_dir, rel_path)

        valimage = _globrec(str(paperimage), '\ournetoncovid - Copy.png')
        pixmap = QPixmap(valimage[0])
        self.imgdata_7.show()
        #self.imagelabel.setText(" healthy ")
        self.val4.setValue(0.947200)
        pixmap_resized = pixmap.scaled(self.imgdata_7.width(), self.imgdata_7.height(), QtCore.Qt.KeepAspectRatio)
        #self.hins_2.setText("CellNet (94.719%  in  Top  -1  accuracy) outperforms  than  the  GhostNet  (92.739%  in  Top  -1  accuracy)and  other  leading  models.")
        self.imgdata_7.setPixmap(pixmap_resized)

        '''
        valimage2 = _globrec(str(paperimage), '\ournetoncovid - Copy.png')
        pixmap2 = QPixmap(valimage2[0])
        self.imgdata_5.show()
        pixmap_resized2 = pixmap2.scaled(self.imgdata_5.width(), self.imgdata_5.height(), QtCore.Qt.KeepAspectRatio)

        self.imgdata_5.setPixmap(pixmap_resized2)
        '''
    def compareonpneumoniaClick(self, compareonpneumonia):

        rel_path = "./paperimage/"
        paperimage = os.path.join(script_dir, rel_path)

        valimage = _globrec(str(paperimage), '\Boxplot of GhostNet on pneu, Our_Net on pneum, resnet18 on pneu.png')
        pixmap = QPixmap(valimage[0])
        self.val_2.setValue(0.917800)
        self.imgdata_9.hide()
        self.imgdata_8.show()
        pixmap_resized = pixmap.scaled(self.imgdata_8.width(), self.imgdata_8.height(), QtCore.Qt.KeepAspectRatio)
        self.hins_2.show()
        self.hins_2.setText("CellNet achieved Top-1 Val Acc 91.78% with 1/10 weights than InceptionV3!")
        self.imgdata_8.setPixmap(pixmap_resized)

    def compareonsshdClick(self, compareonsshd):

        rel_path = "./paperimage/"
        paperimage  = os.path.join(script_dir, rel_path)

        valimage = _globrec(str(paperimage), '\Time Series Plot of Shufflenet V, ResNet18 Val, GhostNet18 V, ...png')
        pixmap = QPixmap(valimage[0])
        self.val5.setValue(0.95638)
        #self.imagelabel.setText(" healthy ")
        self.imgdata_4.show()
        self.hins_3.show()
        pixmap_resized = pixmap.scaled(self.imgdata_4.width(), self.imgdata_4.height(), QtCore.Qt.KeepAspectRatio)
        self.hins.setText("CellNet achieved Top-1 Val Acc 95.638% ")
        self.imgdata_4.setPixmap(pixmap_resized)


    def valuechangeofslider3(self):
        size = int(self.slider3.value())
        print(size)

        rel_path = "./cifar10/"
        imgfolderpathofcifar = os.path.join(script_dir, rel_path)

        rel_path = "./chest_xray/"
        imgfolderpathofpneumonia = os.path.join(script_dir, rel_path)


        if self.inputtheparameters_2.isChecked() and self.inputbutton3_2.isChecked()==False:
            my_picturesoftemplate = _globrec(str(imgfolderpathofcifar),'\*')
            print(len(my_picturesoftemplate))


            self.imgdata_8.hide()
            self.imgdata_9.show()
            self.hins_2.show()
            self.hins_2.setText(str(my_picturesoftemplate[int((size / 100) * len(my_picturesoftemplate))]))
            #self.hins_2.setText("There're 10 classes object in Cifar-10 benchmarking (10* 6000 images)!")
            pixmap = QPixmap((my_picturesoftemplate[int((size/100)*len(my_picturesoftemplate))]))
            pixmap_resized = pixmap.scaled(self.imgdata_9.width(), self.imgdata_9.height(), QtCore.Qt.KeepAspectRatio)
            self.imgdata_9.setPixmap(pixmap_resized)

        elif self.inputtheparameters_2.isChecked() ==False and self.inputbutton3_2.isChecked():
            self.imgdata_9.hide()
            self.imgdata_8.show()

            my_picturesoftemplate = _globrec(str(imgfolderpathofpneumonia), '\*')
            print(len(my_picturesoftemplate))
            self.hins_2.show()

            #self.hins_2.setText("There're 2 classes object in Pneumonia benchmark, in total has 5000!")
            self.hins_2.setText(str(my_picturesoftemplate[int((size / 100) * len(my_picturesoftemplate))]))
            pixmap = QPixmap((my_picturesoftemplate[int((size / 100) * len(my_picturesoftemplate))]))
            pixmap_resized = pixmap.scaled(self.imgdata_8.width(), self.imgdata_8.height(), QtCore.Qt.KeepAspectRatio)
            self.imgdata_8.setPixmap(pixmap_resized)
        else:
            box = QtWidgets.QMessageBox()
            box.warning(self, "Hello", "Please check the button, can visualize the dataset only one by one!")


    def valuechangeofslider4(self):
        global pathlist, predictionlabel, targetlabel
        size = int(self.slider4.value())
        print(size)
        print("pathlist:",pathlist)
        print("pathlist:",len(pathlist))
        rel_path = "./COVID19/"
        imgfolderpathofcovid = os.path.join(script_dir, rel_path)
        print("predictionlabel:", predictionlabel)
        print("predictionlabel:", len(predictionlabel))
        imgfolderpath = str(self.savepath4.toPlainText())

        if self.inputbutton4.isChecked()==True:
            if  pathlist:
                self.hins_3.show()
                self.hins_3.setText(str(pathlist[int((size / 100) * len(pathlist))]))
                print(int((size / 100) * len(pathlist)))
                pixmap = QPixmap((pathlist[int((size / 100) * len(pathlist))]))
                pixmap_resized = pixmap.scaled(self.imgdata_7.width(), self.imgdata_7.height(), QtCore.Qt.KeepAspectRatio)

                self.imagelabel.setText(str(labels2classesofCOVID[targetlabel[int((size / 100) * len(pathlist))]]))
                #print(int((size / 100) * len(targetlabel)))
                #self.predictiontype.setText(str(predictionlabel[int((size / 100) * len(predictionlabel))]))
                self.predictiontype.setText(str(labels2classesofCOVID[predictionlabel[int((size / 100) * len(pathlist))]]))
                #print(int((size / 100) * len(predictionlabel)))

                self.imgdata_7.setPixmap(pixmap_resized)
            else:
                my_pictures = _globrec(str(imgfolderpath), '\*')
                print(my_pictures)
                if not len(my_pictures) == 0:
                    # self.imagelabel.setText(str(targetlabel[0]))
                    # self.predictiontype.setText(str(predictionlabel[0]))
                    self.hins_3.show()
                    self.hins_3.setText(str(my_pictures[int((size / 100) * len(my_pictures))]))
                    pixmap = QPixmap((my_pictures[int((size / 100) * len(my_pictures))]))
                    pixmap_resized = pixmap.scaled(self.imgdata_7.width(), self.imgdata_7.height(),
                                                   QtCore.Qt.KeepAspectRatio)
                    self.imgdata_7.setPixmap(pixmap_resized)
                else:
                    box = QtWidgets.QMessageBox()
                    box.warning(self, "Hello", "No image in given Image Folder !")

        else:
            my_picturesoftemplate = _globrec(str(imgfolderpathofcovid), '\*')
            print(len(my_picturesoftemplate))
            print(my_picturesoftemplate[0][0])
            self.hins_3.show()
            self.hins_3.setText("Because you didn't upload image,so you see default dataset of COVID 19!")
            self.imgdata_7.show()
            pixmap = QPixmap((my_picturesoftemplate[int((size / 100) * len(my_picturesoftemplate))]))
            pixmap_resized = pixmap.scaled(self.imgdata_7.width(), self.imgdata_7.height(),
                                               QtCore.Qt.KeepAspectRatio)
            self.imgdata_7.setPixmap(pixmap_resized)


    def valuechangeofslider5(self):
        size = int(self.slider5.value())
        print(size)
        rel_path = "./cellyolo/output/"
        imgfolderpathofcellyolooutput = os.path.join(script_dir, rel_path)
        imgfolderpath = str(self.savepath5.toPlainText())
        global pathlist2, predictionlabel2, targetlabel2

        print("pathlist:", pathlist2)
        print("pathlist:", len(pathlist2))

        rel_path = "./HDSS/"
        imgfolderpathofhdss = os.path.join(script_dir, rel_path)
        print("predictionlabel2:", predictionlabel2)
        print("predictionlabel2:", len(predictionlabel2))

        if  self.inputbutton5_1.isChecked()==False:
            if self.inputbutton5_2.isChecked() == True:
                if pathlist2:
                    self.imgdata_5.hide()
                    self.hins.show()
                    self.hins.setText(str(pathlist2[int((size / 100) * len(pathlist2))]))
                    print(int((size / 100) * len(pathlist2)))
                    pixmap = QPixmap((pathlist2[int((size / 100) * len(pathlist2))]))
                    pixmap_resized = pixmap.scaled(self.imgdata_4.width(), self.imgdata_4.height(),
                                                   QtCore.Qt.KeepAspectRatio)

                    self.imagelabel2.setText(str(labels2classesofSSHD[targetlabel2[int((size / 100) * len(pathlist2))]]))
                    # print(int((size / 100) * len(targetlabel)))
                    # self.predictiontype.setText(str(predictionlabel[int((size / 100) * len(predictionlabel))]))
                    self.predictiontype2.setText(
                        str(labels2classesofSSHD[predictionlabel2[int((size / 100) * len(pathlist2))]]))
                    # print(int((size / 100) * len(predictionlabel)))

                    self.imgdata_4.setPixmap(pixmap_resized)
                else:
                    my_pictures = _globrec(str(imgfolderpath), '\*')
                    print(my_pictures)
                    if my_pictures:
                        # self.imagelabel.setText(str(targetlabel[0]))
                        # self.predictiontype.setText(str(predictionlabel[0]))
                        self.hins.show()
                        self.hins.setText(str(my_pictures[int((size / 100) * len(my_pictures))]))
                        pixmap = QPixmap((my_pictures[int((size / 100) * len(my_pictures))]))
                        pixmap_resized = pixmap.scaled(self.imgdata_4.width(), self.imgdata_4.height(),
                                                       QtCore.Qt.KeepAspectRatio)
                        self.imgdata_4.setPixmap(pixmap_resized)
                    else:
                        box = QtWidgets.QMessageBox()
                        box.warning(self, "Hello", "No image in given Image Folder !")
            else:
                box = QtWidgets.QMessageBox()
                box.warning(self, "Hello", "No image in given Image Folder !")


        else:
            my_picturesoftemplate = _globrec(str(imgfolderpathofcellyolooutput), '\*.png')
            imgfolderpath2 = str(self.imagelabel2_2.toPlainText())
            self.hins.hide()
            my_pictures = _globrec(str(imgfolderpath2), '\*')
            self.hins.show()
            self.hins.setText(str(my_pictures[int((size / 100) * len(my_pictures))]))
            pixmap = QPixmap((my_pictures[int((size / 100) * len(my_pictures))]))
            pixmap_resized = pixmap.scaled(self.imgdata_4.width(), self.imgdata_4.height(),
                                           QtCore.Qt.KeepAspectRatio)
            self.imgdata_4.setPixmap(pixmap_resized)
            if my_picturesoftemplate:
                self.imgdata_5.show()
                pixmap = QPixmap((my_picturesoftemplate[int((size / 100) * len(my_picturesoftemplate))]))
                pixmap_resized = pixmap.scaled(self.imgdata_5.width(), self.imgdata_5.height(),
                                               QtCore.Qt.KeepAspectRatio)
                self.imgdata_5.setPixmap(pixmap_resized)

    def valuechangeofslider6(self):
        global pathlist3, predictionlabel3, targetlabel3
        size = int(self.slider6.value())
        print(size)
        print("pathlist:",pathlist3)
        print("pathlist:",len(pathlist3))
        rel_path = "./melanoma/"
        imgfolderpathofmelanoma = os.path.join(script_dir, rel_path)
        print("predictionlabel:", predictionlabel3)
        print("predictionlabel:", len(predictionlabel3))
        imgfolderpath = str(self.savepath6.toPlainText())

        if self.inputbutton6.isChecked()==True:
            if  pathlist3:
                self.hins6.show()
                self.hins6.setText(str(pathlist3[int((size / 100) * len(pathlist3))]))
                print(int((size / 100) * len(pathlist3)))
                pixmap = QPixmap((pathlist3[int((size / 100) * len(pathlist3))]))
                pixmap_resized = pixmap.scaled(self.imgdata6.width(), self.imgdata6.height(), QtCore.Qt.KeepAspectRatio)

                self.imagelabel6.setText(str(labels2classesofmelanoma[targetlabel3[int((size / 100) * len(pathlist3))]]))
                #print(int((size / 100) * len(targetlabel)))
                #self.predictiontype.setText(str(predictionlabel[int((size / 100) * len(predictionlabel))]))
                self.predictiontype6.setText(str(labels2classesofmelanoma[predictionlabel3[int((size / 100) * len(pathlist3))]]))
                #print(int((size / 100) * len(predictionlabel)))

                self.imgdata6.setPixmap(pixmap_resized)
            else:
                my_pictures = _globrec(str(imgfolderpath), '\*')
                print(my_pictures)
                if not len(my_pictures) == 0:
                    # self.imagelabel.setText(str(targetlabel[0]))
                    # self.predictiontype.setText(str(predictionlabel[0]))
                    self.hins6.show()
                    self.hins6.setText(str(my_pictures[int((size / 100) * len(my_pictures))]))
                    pixmap = QPixmap((my_pictures[int((size / 100) * len(my_pictures))]))
                    pixmap_resized = pixmap.scaled(self.imgdata6.width(), self.imgdata6.height(),
                                                   QtCore.Qt.KeepAspectRatio)
                    self.imgdata6.setPixmap(pixmap_resized)
                else:
                    box = QtWidgets.QMessageBox()
                    box.warning(self, "Hello", "No image in given Image Folder !")

        else:
            my_picturesoftemplate = _globrec(str(imgfolderpathofmelanoma), '\*')
            print(len(my_picturesoftemplate))
            print(my_picturesoftemplate[0][0])
            self.hins6.show()
            self.hins6.setText("Because you didn't upload image,so you see default dataset of melanoma!")
            self.imgdata6.show()
            pixmap = QPixmap((my_picturesoftemplate[int((size / 100) * len(my_picturesoftemplate))]))
            pixmap_resized = pixmap.scaled(self.imgdata6.width(), self.imgdata6.height(),
                                               QtCore.Qt.KeepAspectRatio)
            self.imgdata6.setPixmap(pixmap_resized)

    def valuechangeofslider7(self):
        global  predictionlabel4, targetlabel4
        size = int(self.slider7.value())
        print(size)
        #print("pathlist:", pathlist3)
        #print("pathlist:", len(pathlist3))
        #rel_path = "/all_data.tsv"

        #pathofcovidnlp = os.path.join(script_dir, rel_path)
        #mypatient = (pd.read_csv(str(pathofcovidnlp), sep="\t")).iloc[:100, 0].to_list()


        if targetlabel4:
            if predictionlabel4:
                filepath = str(self.savepath7.toPlainText())
                if filepath:
                    mypatient = (pd.read_csv(str(filepath), sep="\t")).iloc[100:, 0].to_list()
                    self.hins7.show()
                    self.hins7.setText("The possibility of you got Flu:"+ str(predictionlabel4[int((size / 100) * len(predictionlabel4))].split('\t')[0])+'\n'+"The possibility of you got COVID:"+str(predictionlabel4[int((size / 100) * len(predictionlabel4))].split('\t')[1]))
                    self.textEdit.setText(str(mypatient[int((size / 100) * len(mypatient))]))
                    self.targetlabel7.setText(labels2classesofcovidnlp[str(targetlabel4[int((size / 100) * len(targetlabel4))])])
                else:
                    box = QtWidgets.QMessageBox()
                    box.warning(self, "Hello", "please do upload multiple patients description file  first or you can simply input text to get prediction !")

            else:
                box = QtWidgets.QMessageBox()
                box.warning(self, "Hello", "please do prediction first !")

        else:
            if predictionlabel4:
                filepath = str(self.savepath7.toPlainText())
                if filepath:
                    mypatient = (pd.read_csv(str(filepath), sep="\t")).iloc[100:, 0].to_list()
                    self.hins7.show()
                    self.hins7.setText("The possibility of you got Flu:"+ str(predictionlabel4[int((size / 100) * len(predictionlabel4))].split('\t')[0])+'\n'+"The possibility of you got COVID:"+str(predictionlabel4[int((size / 100) * len(predictionlabel4))].split('\t')[1]))
                    self.textEdit.setText(str(mypatient[int((size / 100) * len(mypatient))]))
                else:
                    box = QtWidgets.QMessageBox()
                    box.warning(self, "Hello", "please do upload multiple patients description file  first or you can simply input text to get prediction !")

            else:
                box = QtWidgets.QMessageBox()
                box.warning(self, "Hello", "please do prediction first !")





    def inputbutton4Click(self,inputbutton4):

        imgfolderpath = str(self.savepath4.toPlainText())

        if  imgfolderpath == '':
            self.hins_3.show()
            box = QtWidgets.QMessageBox()
            box.warning(self, "Hello", "Please input Image Folder and  then click upload button!")
            self.inputbutton4.setChecked(False)
        else:
            self.hins_3.hide()
            my_pictures = _globrec(str(imgfolderpath), '\*')
            infostring1 = "Succeed received " + str(len(my_pictures)) + " images! Start test other functions "
            box = QtWidgets.QMessageBox()
            box.information(self, "Hello", infostring1)

    def inputbutton6Click(self,inputbutton6):

        imgfolderpath = str(self.savepath6.toPlainText())

        if  imgfolderpath == '':
            self.hins6.show()
            box = QtWidgets.QMessageBox()
            box.warning(self, "Hello", "Please input Image Folder and  then click upload button!")
            self.inputbutton6.setChecked(False)
        else:
            self.hins6.hide()
            my_pictures = _globrec(str(imgfolderpath), '\*')
            infostring1 = "Succeed received " + str(len(my_pictures)) + " images! Start test other functions "
            box = QtWidgets.QMessageBox()
            box.information(self, "Hello", infostring1)

    def inputbutton7Click(self,inputbutton7):

        filepath = str(self.savepath7.toPlainText())

        if  filepath == '':
            self.hins7.show()
            box = QtWidgets.QMessageBox()
            box.warning(self, "Hello", "Please input csv Folder and  then click upload button!")
            self.inputbutton7.setChecked(False)
        else:
            self.hins7.hide()
            mypatient = (pd.read_csv(str(filepath),sep="\t")).iloc[:,0].to_list()

            infostring1 = "Succeed received " + str(len(mypatient)) + " descriptions! Start test other functions "
            box = QtWidgets.QMessageBox()
            box.information(self, "Hello", infostring1)


    def inputbutton5_1Click(self,inputbutton5_1):

        imgfolderpath = str(self.imagelabel2_2.toPlainText())

        if  imgfolderpath == '':
            self.hins.hide()
            box = QtWidgets.QMessageBox()
            box.warning(self, "Hello", "Please input Image Folder and  then click cellyolo button!")

        else:
            self.hins.hide()
            my_pictures = _globrec(str(imgfolderpath), '\*')
            infostring1 = "Succeed received " + str(len(my_pictures)) + " images! Start cellyolo segmentation."
            box = QtWidgets.QMessageBox()
            box.information(self, "Hello", infostring1)


    def inputbutton5_2Click(self,inputbutton5_2):

        imgfolderpath = str(self.savepath5.toPlainText())

        if  imgfolderpath == '':
            self.hins.hide()
            box = QtWidgets.QMessageBox()
            box.warning(self, "Hello", "Please input Image Folder and  then click classification button!")
            self.inputbutton5_2.setChecked(False)
        else:
            self.hins.hide()
            my_pictures = _globrec(str(imgfolderpath), '\*')
            infostring1 = "Succeed received " + str(len(my_pictures)) + " images! Start test other functions "
            box = QtWidgets.QMessageBox()
            box.information(self, "Hello", infostring1)

    def prediction4Click(self,prediction4):
        imgfolderpath = str(self.savepath4.toPlainText())
        global pathlist, predictionlabel, targetlabel

        if self.inputbutton4.isChecked():
            my_pictures = _globrec(str(imgfolderpath), '\*')
            infostring1 = "Succeed received " + str(len(my_pictures)) + " images! it takes " +str(len(my_pictures)*0.38 )+  " second for prediction with CellNet."
            box = QtWidgets.QMessageBox()
            box.information(self, "Hello", infostring1)
            self.hins_3.show()

            parser = argparse.ArgumentParser()
            parser.add_argument('--weights', type=str, default='cellyolo/weights/model_best.pt',
                                help='path to weights file')
            parser.add_argument('--source', type=str, default=imgfolderpath, help='source')  # input file/folder, 0 for webcam
            parser.add_argument('--img-size', type=int, default=416, help='inference size (pixels)')
            parser.add_argument('--device', default='', help='device id (i.e. 0 or 0,1) or cpu')
            opt = parser.parse_args()
            print(opt)
            with torch.no_grad():
                predictionlabel,targetlabel,Precision,Recall,pathlist=detect(opt)
                info="Succeed evaluated on " + str(len(predictionlabel)) \
                     + " val images! it takes " +str(len(predictionlabel)*0.38 )+  " second for prediction with CellNet."
                self.hins_3.show()
                self.hins_3.setText(info)
                infotext=info+" Precision:"+str(round(Precision, 2))+ " Recall:" + str(round(Recall, 2))
                self.hins_3.setText(infotext)

        else:
            box = QtWidgets.QMessageBox()
            box.warning(self, "Hello", "Please input Image Folder and  then click upload button!")

    def prediction5Click(self,prediction5):
        imgfolderpath = str(self.savepath5.toPlainText())
        global pathlist2, predictionlabel2, targetlabel2
        self.inputbutton5_1.setChecked(False)

        if self.inputbutton5_2.isChecked():
            my_pictures = _globrec(str(imgfolderpath), '\*')
            infostring1 = "Succeed received " + str(len(my_pictures)) + " images! it takes " +str(round(len(my_pictures)*0.38,2) )+  " second for prediction with CellNet."
            box = QtWidgets.QMessageBox()
            box.information(self, "Hello", infostring1)
            self.hins.show()

            parser = argparse.ArgumentParser()
            parser.add_argument('--weights', type=str, default='cellyolo/weights/checkpoint2.pt',
                                help='path to weights file')
            parser.add_argument('--source', type=str, default=imgfolderpath, help='source')  # input file/folder, 0 for webcam
            parser.add_argument('--img-size', type=int, default=416, help='inference size (pixels)')
            parser.add_argument('--device', default='', help='device id (i.e. 0 or 0,1) or cpu')
            opt = parser.parse_args()
            print(opt)
            with torch.no_grad():
                predictionlabel2,targetlabel2,Precision,Recall,pathlist2=detect(opt)
                info="Succeed evaluated on " + str(len(predictionlabel2)) \
                     + " val images! it takes " +str(len(predictionlabel2)*0.38 )+  " second for prediction with CellNet."
                self.hins.show()
                self.hins.setText(info)
                infotext=info+" Precision:"+str(round(Precision, 2))+ " Recall:" + str(round(Recall, 2))
                self.hins.setText(infotext)

        else:
            box = QtWidgets.QMessageBox()
            box.warning(self, "Hello", "Please input Image Folder and  then click classification button!")

    def cellyoloClick(self, cellyolo):
        imgfolderpath = str(self.imagelabel2_2.toPlainText())

        if  imgfolderpath == '':
            self.hins.hide()
            box = QtWidgets.QMessageBox()
            box.warning(self, "Hello", "Please input Image Folder and  then click cellyolo button!")
            self.inputbutton5_1.setChecked(False)
        else:
            self.hins.hide()
            my_pictures = _globrec(str(imgfolderpath), '\*')
            infostring1 = "Succeed received " + str(len(my_pictures)) + " images! Start test other functions "
            box = QtWidgets.QMessageBox()
            box.information(self, "Hello", infostring1)

            parser = argparse.ArgumentParser()

            parser.add_argument('--cfg', type=str, default='cellyolo/cfg/yolov3-tiny-train.cfg', help='*.cfg path')
            parser.add_argument('--names', type=str, default='cellyolo/data/coco.names', help='*.names path')
            parser.add_argument('--weights', type=str, default='cellyolo/weights/best.pt', help='path to weights file')
            parser.add_argument('--source', type=str, default= imgfolderpath,
                                help='source')  # input file/folder, 0 for webcam
            parser.add_argument('--output', type=str, default='cellyolo/output', help='output folder')  # output folder
            parser.add_argument('--img-size', type=int, default=416, help='inference size (pixels)')
            parser.add_argument('--conf-thres', type=float, default=0.3, help='object confidence threshold')
            parser.add_argument('--iou-thres', type=float, default=0.5, help='IOU threshold for NMS')
            parser.add_argument('--fourcc', type=str, default='mp4v', help='output video codec (verify ffmpeg support)')
            parser.add_argument('--half', action='store_true', help='half precision FP16 inference')
            parser.add_argument('--device', default='', help='device id (i.e. 0 or 0,1) or cpu')
            parser.add_argument('--view-img', action='store_true', default=0, help='display results')
            parser.add_argument('--save-txt', action='store_true', default=0, help='display results')
            parser.add_argument('--classes', nargs='+', type=int, help='filter by class')
            opt = parser.parse_args()
            print(opt)
            with torch.no_grad():
                segmentation(opt)
            box = QtWidgets.QMessageBox()
            box.warning(self, "Hello", "Please see Image under Cellyolo/Output/!")


    def prediction6Click(self,prediction6):
        imgfolderpath = str(self.savepath6.toPlainText())
        global pathlist3, predictionlabel3, targetlabel3


        if self.inputbutton6.isChecked():
            my_pictures = _globrec(str(imgfolderpath), '\*')
            infostring1 = "Succeed received " + str(len(my_pictures)) + " images! it takes " + str(
                round(len(my_pictures) * 0.38, 2)) + " second for prediction with CellNet."
            box = QtWidgets.QMessageBox()
            box.information(self, "Hello", infostring1)
            self.hins6.show()

            parser = argparse.ArgumentParser()
            parser.add_argument('--weights', type=str, default='weights/model_bestcellnetonmelanomaafteraveragedis.pt',
                                help='path to weights file')
            parser.add_argument('--source', type=str, default=imgfolderpath,
                                help='source')  # input file/folder, 0 for webcam
            parser.add_argument('--img-size', type=int, default=416, help='inference size (pixels)')
            parser.add_argument('--device', default='', help='device id (i.e. 0 or 0,1) or cpu')
            opt = parser.parse_args()
            print(opt)
            with torch.no_grad():
                predictionlabel3, targetlabel3, Precision, Recall, pathlist3 = detect(opt)
                info = "Succeed evaluated on " + str(len(predictionlabel3)) \
                       + " val images! it takes " + str(
                    len(predictionlabel3) * 0.38) + " second for prediction with CellNet."
                self.hins6.show()
                self.hins6.setText(info)
                infotext = info + " Precision:" + str(round(Precision, 2)) + " Recall:" + str(round(Recall, 2))
                self.hins6.setText(infotext)

        else:
            box = QtWidgets.QMessageBox()
            box.warning(self, "Hello", "Please input Image Folder and  then click classification button!")

    def prediction7Click(self,prediction7):
        filepath = str(self.savepath7.toPlainText())
        global predictionlabel4, targetlabel4
        patientinfo=str(self.textEdit.toPlainText())
        onlyonepatient=[]
        onlyonepatient.append(patientinfo)

        if self.inputbutton7.isChecked() and patientinfo =="":

            mypatient = (pd.read_csv(str(filepath), sep="\t")).iloc[:100, 0].to_list()
            infostring1 = "Succeed received " + str(len(mypatient)) + " patients info! it takes " + str(
                round(len(mypatient) * 0.2, 2)) + " second for prediction with bert."
            box = QtWidgets.QMessageBox()
            box.information(self, "Hello", infostring1)
            self.hins7.show()

            results = run_classifier.run(" ", "cus", "models/bert/uncased_L-12_H-768_A-12/uncased_L-12_H-768_A-12/vocab.txt",
                                             "models/bert/uncased_L-12_H-768_A-12/uncased_L-12_H-768_A-12/bert_config.json",
                                             "models/bert/model_weight/model_weight/model.ckpt", "models/bert/output/", mypatient)
            print(results)

            targetlabel4=(pd.read_csv(str(filepath), sep="\t")).iloc[:100, 1].to_list()
            predictionlabel4=results
            info = "Succeed evaluated on " + str(len(predictionlabel4)) \
                       + " patients! it takes " + str(
                    len(predictionlabel4) * 0.2) + " second for prediction with bert."
            self.hins7.show()
            self.hins7.setText(info)
        elif self.inputbutton7.isChecked()==False and patientinfo !="":
            infostring1 ="Succeed received " + str(len(onlyonepatient)) + " patients info! it takes " + str(round(len(onlyonepatient) * 0.2, 2)) + " second for prediction with bert."
            box= QtWidgets.QMessageBox()
            box.information(self, "Hello", infostring1)
            self.hins7.show()
            results = run_classifier.run(" ", "cus", "models/bert/uncased_L-12_H-768_A-12/uncased_L-12_H-768_A-12/vocab.txt",
                                             "models/bert/uncased_L-12_H-768_A-12/uncased_L-12_H-768_A-12/bert_config.json",
                                             "models/bert/model_weight/model_weight/model.ckpt", "models/bert/output/", onlyonepatient)
            predictionlabel4 = results

            self.hins7.show()

            self.hins7.setText("The possibility of you got Flu:" + str(
                predictionlabel4[0].split('\t')[0]) + '\n' + "The possibility of you got COVID:" + str(
                predictionlabel4[0].split('\t')[1])+"Please take care and stay safe, Love U!")
        else:
            box = QtWidgets.QMessageBox()
            box.warning(self, "Hello", "Please unable the upload button!")




































    def reject(self):
        self.hins.setText("reject")

    def accept(self):
        self.hins.setText("accept")








if __name__ == "__main__":

    app = QtWidgets.QApplication(sys.argv)
    window = MyApp()
    window.show()
    sys.exit(app.exec_())
